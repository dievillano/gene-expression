---
title: "Differential expression analysis"
format: pdf
editor: source
---

## Reading data 

```{r}
counts_raw <- readr::read_delim(
  "data/GSE292021_counts_quantseq_CryptoRNAseqFLC1.txt", delim = "\t",
  col_types = paste0(c("ciiici", rep("i", 30)), collapse = "")
)
colnames(counts_raw)[1:6] <- c(
  "gene", "chr", "start", "end", "strand", "length"
)
```

```{r}
samples_raw <- readr::read_delim(
  "data/GSE292021_CryptoRNAseqFLC1SampleKey_tabseparated.txt", delim = "\t",
  col_names = c(
    "sample", "temperature", "media", "bio_rep", "strain", "sample_name", 
    "flc1"
  ),
  col_select = -strain,
  col_types = "ccciccc", skip = 1
)
```

## Preprocessing

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
theme_set(theme_classic())
```

```{r}
samples <- samples_raw |> 
  mutate(
    temperature = factor(temperature, levels = c("37", "30")),
    media = factor(
      media, levels = unique(media), labels = c("Y", "YC", "YE", "YCE")
    ),
    strain = factor(flc1, levels = unique(flc1), labels = c("WT", "FL")),
    condition = sprintf("%s-%s-%s", strain, media, temperature),
    condition = factor(condition, levels = unique(condition))
  ) |> 
  select(-c(bio_rep, sample_name, flc1))
```

```{r}
counts <- counts_raw |> 
  select(c(names(counts_raw)[1:6], samples$sample))
```

```{r}
dim(counts)
```

```{r}
counts_long <- counts |> 
  pivot_longer(cols = S1:S30, names_to = "sample", values_to = "count") |> 
  left_join(samples, by = c("sample" = "sample")) |> 
  mutate(sample = factor(sample, levels = samples$sample))
```

```{r}
gene_summary <- counts_long |> 
  group_by(gene) |> 
  summarise(
    total = sum(count), mean = mean(count), var = var(count), sd = sd(count), 
    min = min(count), max = max(count), median = median(count), .groups = "drop"
  ) 

gene_summary |> 
  slice_head(n = 20)
```

```{r}
readr::write_csv(gene_summary, file = "results/gene_summary.csv")
```

```{r}
sample_summary <- counts_long |> 
  group_by(condition, sample) |> 
  summarise(total = sum(count), .groups = "drop")

sample_summary |> 
  slice_head(n = 20)
```

```{r}
readr::write_csv(sample_summary, file = "results/sample_summary.csv")
```

```{r}
libsizes_plot <- counts_long |> 
  group_by(condition, sample) |> 
  summarise(total_count = sum(count), .groups = "drop") |> 
  ggplot(aes(total_count/1.e6, sample, fill = condition)) +
  geom_bar(stat = "identity") +
  # scale_x_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
  labs(y = "Sample", x = "Library size (in millions)", fill = "Condition") +
  theme(axis.text = element_text(size = 7)) +
  ggsci::scale_fill_npg()

libsizes_plot
```

```{r}
ggsave("figures/lib_sizes.pdf", libsizes_plot, width = 7, height = 4.2)
```

```{r}
counts_mat <- counts |> 
  select(c(gene, S1:S30)) |> 
  tibble::column_to_rownames(var = "gene") |> 
  as.matrix()
```

### Pre-filtering

```{r}
library(edgeR)
```

```{r}
design <- model.matrix(
  ~ temperature + strain + media + temperature:strain + media:strain, 
  data = samples
)
```

```{r}
genes_keep <- filterByExpr(
  counts_mat, design = design, min.count = 10, min.total.count = 15
)
```

```{r}
saveRDS(genes_keep, file = "results/genes_keep.rds")
```

```{r}
counts_filter_mat <- counts_mat[genes_keep, ]
```

### Normalization and transformation

```{r}
counts_mats <- list(full = counts_mat, filter = counts_filter_mat)
```

```{r}
counts_mats_df <- tibble(type = c("full", "filter"), mat = counts_mats)
```

```{r}
transform_methods <- c("cpm", "logcpm", "rlog", "vst")
```

```{r}
library(tidyr)
```

```{r}
mats <- expand_grid(
  counts_mats_df, method = transform_methods
) |> 
  relocate(method, .before = mat)
```

```{r}
library(DESeq2)
```

```{r}
get_transform <- function(mat, method = "cpm", blind = TRUE) {
  if (!(method %in% c("cpm", "logcpm", "rlog", "vst"))) stop("Method not available.")
  
  if (method == "cpm") {
    mat_transform <- cpm(mat, normalized.lib.sizes = FALSE, log = FALSE)
  } else if (method == "logcpm" ) {
    mat_transform <- cpm(mat, normalized.lib.sizes = FALSE, log = TRUE)
  } else if (method == "rlog" ) {
    mat_transform <- rlog(mat, blind = blind)
  } else {
    mat_transform <- vst(mat, blind = blind)
  }
  
  mat_transform
}
```

```{r}
library(purrr)
```

```{r}
transformed <- mats |> 
  mutate(
    transformed = map2(
      mat, method, \(x, y) get_transform(x, y)
    )
  ) |> 
  select(-mat)
```

```{r}
transformed <- transformed |> 
  mutate(
    df = map(
      transformed,
      \(x) x |> 
        as.data.frame() |> 
        tibble::rownames_to_column("gene") |> 
        pivot_longer(
          cols = starts_with("S"), names_to = "sample", values_to = "expression"
        ) |> 
        inner_join(samples, by = c("sample" = "sample")) |> 
        mutate(sample = factor(sample, levels = samples$sample))
    )
  )
```

```{r}
transformed_filter <- transformed |> 
  filter(type == "filter") |> 
  select(method, df) |> 
  unnest(df) |> 
  mutate(
    method_factor = factor(method, labels = c("CPM*", "log2-CPM", "rlog", "VST"))
  )
```

```{r}
transformed_filter_boxplot <- transformed_filter |> 
  ggplot(aes(expression, y = sample, colour = condition)) +
  facet_wrap(vars(method_factor), ncol = 2, scales = "free_x") +
  geom_boxplot(outlier.size = 0.2, lwd = 0.5) +
  labs(x = "Expression level", y = "Sample", colour = "Condition") +
  theme(axis.text = element_text(size = 7)) +
  ggsci::scale_colour_npg()

transformed_filter_boxplot
```

```{r}
ggsave("figures/transformed_filter_boxplot.pdf", transformed_filter_boxplot, width = 9, height = 7)
```

```{r}
meansd_plot <- transformed_filter |> 
  group_by(method_factor, gene) |> 
  summarise(mean = mean(expression), sd = sd(expression)) |> 
  mutate(rank = rank(mean)) |> 
  ungroup() |> 
  ggplot(aes(rank, sd)) +
  facet_wrap(vars(method_factor), ncol = 2, scales = "free_y") +
  geom_point(colour = "grey", size = 0.2) +
  geom_smooth(
    method = "gam", formula = y ~ s(x, bs = "cs"), colour = "red", lwd = 0.5
  ) +
  labs(x = "Rank of mean expression level", y = "SD") +
  theme(axis.text = element_text(size = 7)) 

meansd_plot
```

```{r}
ggsave("figures/meansd_plot.pdf", meansd_plot, width = 6, height = 4)
```

### EDA

```{r}
# library(factoextra)
library(PCAtools)
```

```{r}
pca_results <- transformed |> 
  select(-df) |> 
  mutate(
    pca = map(
      transformed, 
      \(x) pca(
        x, metadata = tibble::column_to_rownames(samples, "sample"),
        removeVar = 0.9
      )
    ),
    n_comp = map(transformed, \(x) parallelPCA(x, max.rank = 10)$n),
    var_explained = map2(
      pca, n_comp, 
      \(x, y) cumsum(x$variance[seq_len(y)])[y]
    )
  )
```

```{r}
pca_results_comp <- pca_results |> 
  select(type, method, n_comp, var_explained) |> 
  unnest(c(n_comp, var_explained))

pca_results_comp
```

```{r}
readr::write_csv(pca_results_comp, "results/pca_results_comp.csv")
```

```{r}
pca_results_rlog <- filter(pca_results, type == "filter", method == "rlog")
pca_rlog <- pca_results_rlog$pca[[1]]
ncomp_rlog <- pca_results_rlog$n_comp[[1]]
```

```{r}
screeplot_rlog <- screeplot(
  pca_rlog, components = getComponents(pca_rlog, 1:10), vline = ncomp_rlog,
  title = NULL, axisLabSize = 5, colBar = "gray", sizeCumulativeSumLine = 0.5,
  sizeCumulativeSumPoints = 1
) +
  theme_classic() +
  theme(axis.text = element_text(size = 7))

screeplot_rlog
```

```{r}
ggsave("figures/screeplot_rlog.pdf", screeplot_rlog, width = 4, height = 3)
```

```{r}
pal <- ggsci::pal_bmj()(8)
```

```{r}
strain_cols <- pal[1:2]
names(strain_cols) <- levels(samples$strain)
media_cols <- pal[3:6]
names(media_cols) <- levels(samples$media)
temperature_cols <- rev(pal[7:8])
names(temperature_cols) <- levels(samples$temperature)
condition_cols <- ggsci::pal_npg()(10)
names(condition_cols) <- unique(samples$condition)
conditions_pal <- list(
  strain = strain_cols, media = media_cols, temperature = temperature_cols,
  condition = condition_cols
)
```

```{r}
plot_pca_rotations <- function(pca_results, metadata, colour_by, shape_by = NULL, pc_x = 1, pc_y = 2, point_size = 2) {

  rotations <- as.data.frame(pca_results$rotated)
  variance <- pca_results$variance
  
  pcx <- paste0("PC", pc_x)
  pcy <- paste0("PC", pc_y)
  comp_var <- format(variance[c(pc_x, pc_y)], digits = 2, nsmall = 2)

  rotated_meta <- rotations |>
    tibble::rownames_to_column(var = "sample") |>
    left_join(metadata, by = "sample")

  x_max <- max(abs(rotated_meta[[pcx]])) * 1.05
  y_max <- max(abs(rotated_meta[[pcy]])) * 1.05
  
  p <- ggplot(rotated_meta, aes(x = !!sym(pcx), y = !!sym(pcy))) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    geom_vline(xintercept = 0, linetype = "dashed") 
  
  if (is.null(shape_by)) {
    p <- p + 
      geom_point(aes(colour = !!sym(colour_by)), size = point_size)
  } else {
    p <- p + 
      geom_point(
        aes(colour = !!sym(colour_by), shape = !!sym(shape_by)), 
        size = point_size
      )
  }
  
  p +
    scale_x_continuous(limits = c(-x_max, x_max)) +
    scale_y_continuous(limits = c(-y_max, y_max)) +
    labs(
      x = glue::glue("{pcx} ({comp_var[1]}%)"),
      y = glue::glue("{pcy} ({comp_var[2]}%)"),
      colour = colour_by,
      shape = if (!is.null(shape_by)) shape_by else NULL
    ) 
}
```

```{r}
pca_rlog <- pca_results |> 
  filter(type == "filter", method == "rlog") |> 
  pull(pca) |> 
  magrittr::extract2(1) 
```

```{r}
pca12_rlog_plot <- plot_pca_rotations(
  pca_rlog, metadata = samples, colour_by = "condition"
) +
  scale_color_discrete(name = "Condition", type = conditions_pal$condition) 

pca12_rlog_plot
```

```{r}
pca13_rlog_plot <- plot_pca_rotations(
  pca_rlog, metadata = samples, pc_y = 3, colour_by = "condition"
) +
  scale_color_discrete(name = "Condition", type = conditions_pal$condition) 

pca13_rlog_plot
```

```{r}
pca23_rlog_plot <- plot_pca_rotations(
  pca_rlog, metadata = samples, pc_x = 2, pc_y = 3, colour_by = "condition"
) +
  scale_color_discrete(name = "Condition", type = conditions_pal$condition) 

pca23_rlog_plot
```

```{r}
library(patchwork)
```

```{r}
pca_rlog_plot <- pca12_rlog_plot + pca13_rlog_plot + pca23_rlog_plot + 
  plot_layout(ncol = 2, guides = "collect") +
  plot_annotation(tag_levels = 'A')

pca_rlog_plot
```

```{r}
ggsave("figures/pca_rlog_plot.pdf", pca_rlog_plot, width = 12, height = 8)
```

```{r}
pca12_rlog_fact_plot <- plot_pca_rotations(
  pca_rlog, metadata = samples, colour_by = "strain", 
  shape_by = "media"
) +
  scale_color_discrete(name = "Strain", type = conditions_pal$strain) +
  scale_shape_discrete(name = "Media") +
  theme(legend.position = "top")

pca12_rlog_fact_plot
```

```{r}
pca13_rlog_fact_plot <- plot_pca_rotations(
  pca_rlog, metadata = samples, colour_by = "temperature", 
  shape_by = "strain", pc_x = 1, pc_y = 3
) +
  scale_color_discrete(name = "Temperature", type = conditions_pal$temperature) +
  scale_shape_discrete(name = "Strain") +
  theme(legend.position = "top")

pca13_rlog_fact_plot
```

```{r}
pca23_rlog_fact_plot <- plot_pca_rotations(
  pca_rlog, metadata = samples, colour_by = "media", 
  shape_by = "temperature", pc_x = 2, pc_y = 3
) +
  scale_color_discrete(name = "Media", type = conditions_pal$media) +
  scale_shape_discrete(name = "Temperature") +
  theme(legend.position = "top")

pca23_rlog_fact_plot
```

```{r}
plot_pca_loadings <- function(pca_results, pc_x = 1, pc_y = 2, top_n = 5) {
  loadings <- pca_results$loadings
  variance <- pca_results$variance
  
  pcx_col <- paste0("PC", pc_x)
  pcy_col <- paste0("PC", pc_y)
  
  comp_var <- format(variance[c(pc_x, pc_y)], digits = 2, nsmall = 2)
  
  loadings_tbl <- loadings |>
    tibble::rownames_to_column(var = "gene") |>
    as_tibble()
  
  top_x <- loadings_tbl |>
    slice_max(order_by = abs(!!sym(pcx_col)), n = top_n)

  top_y <- loadings_tbl |>
    slice_max(order_by = abs(!!sym(pcy_col)), n = top_n)
  
  top_genes <- bind_rows(top_x, top_y) |>
    distinct(gene, .keep_all = TRUE)
  
  x_max <- max(abs(top_genes[[pcx_col]])) * 1.05
  y_max <- max(abs(top_genes[[pcy_col]])) * 1.05

  ggplot(top_genes, aes(x = !!sym(pcx_col), y = !!sym(pcy_col))) +
    geom_segment(
      aes(x = 0, y = 0, xend = !!sym(pcx_col), yend = !!sym(pcy_col)),
      arrow = arrow(length = unit(0.2, "cm")),
      color = "gray", alpha = 0.6
    ) +
    geom_text_repel(aes(label = gene), size = 3.5, max.overlaps = Inf) +
    geom_vline(xintercept = 0, linetype = "dashed") +
    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_x_continuous(limits = c(-x_max, x_max)) +
    scale_y_continuous(limits = c(-y_max, y_max)) +
    labs(
      x = glue::glue("PC{pc_x} ({comp_var[1]}%)"),
      y = glue::glue("PC{pc_y} ({comp_var[2]}%)")
    ) 
}
```

```{r}
pca12_rlog_load_plot <- plot_pca_loadings(
  pca_rlog, pc_x = 1, pc_y = 2, top_n = 5
)

pca12_rlog_load_plot
```

```{r}
pca13_rlog_load_plot <- plot_pca_loadings(
  pca_rlog, pc_x = 1, pc_y = 3, top_n = 5
)

pca13_rlog_load_plot
```

```{r}
pca23_rlog_load_plot <- plot_pca_loadings(
  pca_rlog, pc_x = 2, pc_y = 3, top_n = 5
)

pca23_rlog_load_plot
```

```{r}
pca_rlog_full_plot <- 
  ((pca12_rlog_fact_plot + pca12_rlog_load_plot) + plot_layout(tag_level = "new")) /
  ((pca13_rlog_fact_plot + pca13_rlog_load_plot) + plot_layout(tag_level = "new")) /
  ((pca23_rlog_fact_plot + pca23_rlog_load_plot) + plot_layout(tag_level = "new")) +
  plot_annotation(tag_levels = c("A", "1"))

pca_rlog_full_plot
```

```{r}
ggsave("figures/pca_rlog_full_plot.pdf", pca_rlog_full_plot, width = 12, height = 12)
```

```{r}
plot_top_loadings_barplot <- function(pca_results, n_top = 10, pcs = 1:3) {
  
  loadings <- pca_results$loadings |>
    as.data.frame() |>
    tibble::rownames_to_column(var = "gene") |>
    pivot_longer(
      cols = starts_with("PC"),
      names_to = "PC",
      values_to = "loading"
    ) |>
    filter(PC %in% paste0("PC", pcs)) |>
    group_by(PC) |>
    slice_max(order_by = abs(loading), n = n_top, with_ties = FALSE) |>
    ungroup() |> 
    mutate(gene = forcats::fct_reorder(gene, abs(loading)))

  load_range <- range(loadings$loading, na.rm = TRUE)
  padding <- 0.1 * diff(load_range) 
  x_limits <- c(load_range[1] - padding, load_range[2] + padding)

  ggplot(loadings, aes(x = gene, y = loading, fill = loading > 0)) +
    geom_col() +
    coord_flip() +
    geom_text(
      aes(label = gene), hjust = ifelse(loadings$loading > 0, -0.1, 1.1), 
      size = 2
    ) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    facet_wrap(vars(PC), ncol = 1, scales = "free_y") +
    scale_fill_manual(
      values = c("TRUE" = "#377eb8", "FALSE" = "#e41a1c"), guide = "none"
    ) +
    theme(
      axis.title.y = element_blank(), axis.text.y = element_blank(),
      axis.ticks.y = element_blank(), axis.line.y = element_blank()
    ) +
    scale_y_continuous(limits = x_limits) +
    labs(y = "Loading")
}
```

```{r}
pca_rlog_load_plot <- plot_top_loadings_barplot(pca_rlog)
pca_rlog_load_plot
```

```{r}
ggsave("figures/pca_rlog_load_plot.pdf", pca_rlog_load_plot, width = 7, height = 5.5)
```

```{r}
scores <- pca_rlog$rotated |>
  as.data.frame() |>
  tibble::rownames_to_column("sample") |>
  left_join(samples, by = "sample")
```

```{r}
pc_names <- colnames(pca_rlog$rotated)[1:3]
```

```{r}
factors <- c("strain", "media", "temperature")
```

```{r}
anova_results <- expand_grid(pc = pc_names, factor = factors) |> 
  mutate(
    anova = map2(
      pc, factor,
      \(x, y) {
        model <- lm(as.formula(paste(x, "~", y)), data = scores)
        broom::tidy(aov(model)) |> filter(term == y) |>
          mutate(p_value = p.value, .keep = "none")
      }
    )
  ) |> 
  unnest(anova) |> 
  mutate(
    sig = case_when(
      p_value < 0.001 ~ "< 0.001",
      p_value < 0.01 ~ "< 0.01",
      p_value < 0.05 ~ "< 0.05",
      TRUE ~ "N.S."
    ),
    pc = factor(pc, levels = c("PC1", "PC2", "PC3")),
    factor = factor(
      factor, levels = c("strain", "media", "temperature"),
      labels = c("Strain", "Media", "Temperature")
    )
  )
```

```{r}
anova_plot <- ggplot(anova_results, aes(x = pc, y = factor, fill = sig)) +
  geom_tile(color = "white") +
  geom_text(aes(label = signif(p_value, 2)), size = 2) +
  scale_fill_manual(
    values = c(
      "< 0.001" = "#b2182b",
      "< 0.05" = "#ef8a62",
      "N.S." = "grey90"
    ),
    name = "p-value"
  ) +
  labs(x = "Principal component", y = "Experimental factor") +
  theme_minimal() +
  theme(
    panel.grid = element_blank()
  )

anova_plot
```

```{r}
ggsave("figures/anova_plot.pdf", anova_plot, width = 5, height = 3)
```



### Differential expression analysis

```{r}
de_dfs <- counts_mats_df |> 
  mutate(
    de_df = map(
      mat,
      \(x) DESeqDataSetFromMatrix(
        countData = x, colData = samples, 
        design = ~ strain + media + temperature + strain:media + 
          strain:temperature
      )
    ),
    de = map(de_df, DESeq)
  )
```

Based on https://github.com/thelovelab/DESeq2/blob/devel/R/plots.R

```{r}
plot_dispersion <- function(object, size = 0.5) {
  
  df <- as_tibble(mcols(object)) |>
    mutate(
      dispOutlier = ifelse(dispOutlier, "Yes", "No"),
      finalDisp = as.numeric(dispersions(object))
    ) |>
    filter(baseMean > 0)

  ymin <- 10^floor(
      log10(min(df$dispGeneEst[df$dispGeneEst > 0], na.rm = TRUE)) - 0.1
    )
  
  df <- df |>
      mutate(geneEstPlot = pmax(dispGeneEst, ymin))
  
  ggplot(df, aes(x = baseMean)) +
    geom_point(aes(y = geneEstPlot, colour = "Gene"), size = size) +
    geom_point(
      aes(y = finalDisp, shape = dispOutlier, colour = "Shrinkage"), size = size
    ) +
    geom_point(aes(y = dispFit, colour = "Trend"), size = size) +
    scale_shape_manual(values = c("Yes" = 4, "No" = 19), name = "Outlier") +
    scale_colour_manual(
      values = c("Gene" = "gray", "Shrinkage" = "#377eb8", "Trend" = "#e41a1c"),
      name = "Estimate"
    ) +
    scale_x_log10() +
    scale_y_log10() +
    labs(x = "Mean of expression level", y = "Dispersion") 
  
}
```

```{r}
dispersion_full_plot <- plot_dispersion(de_dfs$de[[1]], size = 0.8)
dispersion_full_plot
```

```{r}
dispersion_filter_plot <- plot_dispersion(de_dfs$de[[2]], size = 0.8)
dispersion_filter_plot
```

```{r}
dispersion_plot <- dispersion_full_plot / dispersion_filter_plot + 
  plot_layout(guides = "collect") +
  plot_annotation(tag_levels = "A")
dispersion_plot
```


```{r}
ggsave("figures/dispersion_plot.pdf", dispersion_plot, width = 8, height = 6)
```

```{r}
res_names <- resultsNames(de_dfs$de[[1]])[-1]
```

```{r}
de_contrasts <- tibble::tibble(term = res_names) |> 
  mutate(
    contrast = purrr::map(
      term,
      \(x) c(0, as.numeric(res_names == x))
    )
  )
```

```{r}
de_results <- tidyr::expand_grid(de_dfs, de_contrasts) |> 
  select(-c(mat, de_df)) |> 
  mutate(
    term_fct = factor(
      term, levels = res_names,
      labels = c(
        "Strain (FL)", "Media (YC)", "Media (YE)", "Media (YCE)", "Temperature (30)",
        "Strain (FL) + Media (YC)", "Strain (FL) + Media (YE)", 
        "Strain (FL) + Media (YCE)", 
        "Strain (FL) + Temperature (30)"
      )
    )
  ) |> 
  mutate(
    term_type = case_when(
      grepl("[+]", term_fct) ~ "interaction",
      TRUE ~ "main"
    )
  )
```

```{r}
de_results <- de_results |> 
  mutate(
    result = map2(
      de, term,
      \(x, y) results(
        x, name = y, lfcThreshold = 0, alpha = 0.1, 
        independentFiltering = TRUE
      )
    ),
    result_shrink = pmap(
      list(a = de, b = result, c = term), 
      \(a, b, c) lfcShrink(dds = a, coef = c, res = b , type = "apeglm")
    ), 
    result_df = map(
      result_shrink,
      \(x) as.data.frame(x) |> 
        tibble::rownames_to_column(var = "gene") |> 
        relocate(gene, .before = everything()) |> 
        mutate(
          detection_call = case_when(
            padj <= 0.1 ~ 1,
            padj > 0.1 ~ 0,
            is.na(padj) ~ NA_integer_
          ),
          detection_call_fct = factor(
            detection_call, levels = c("1", "0"),
            labels = c("Sig.", "N.S.")
          )
        )
    )
  )
```

```{r}
de_results_df <- de_results |> 
  select(type, term, term_fct, term_type, result_df) |> 
  unnest(result_df)
```

```{r}
de_results_df_full <- de_results_df |> 
  filter(type == "full", term_type == "interaction")
```

```{r}
de_results_df_full |> 
  drop_na(pvalue) |> 
  ggplot(aes(pvalue)) +
  facet_wrap(vars(term_fct), ncol = 2) +
  geom_histogram(fill = "gray", colour = "black", breaks = 0:20/20) 
```

```{r}
de_results_df_filter <- de_results_df |> 
  filter(type == "filter", term_type == "interaction")
```

```{r}
pvalue_hist <- de_results_df_filter |> 
  drop_na(pvalue) |> 
  ggplot(aes(pvalue)) +
  facet_wrap(vars(term_fct), ncol = 2) +
  geom_histogram(fill = "gray", colour = "black", breaks = 0:20/20) +
  labs(x = "p-value", y = "Frequency")

pvalue_hist
```

```{r}
ggsave("figures/pvalue_hist.pdf", pvalue_hist, width = 6, height = 5)
```

```{r}
results_terms <- de_results_df |> 
  filter(term_type == "interaction") |> 
  group_by(type, term, term_fct) |> 
  summarise(
    filtered = sum(!is.na(pvalue) & is.na(padj) & baseMean > 0),
    outilers = sum(is.na(pvalue) & is.na(padj) & baseMean > 0),
    upregulated = sum(!is.na(padj) & detection_call == 1 & log2FoldChange > 0),
    downregulated = sum(!is.na(padj) & detection_call == 1 & log2FoldChange <= 0),
    .groups = "drop"
  )

results_terms
```

```{r}
readr::write_csv(results_terms, "results/results_terms.csv")
```

```{r}
ma_plot <- de_results_df_filter |>
  drop_na(padj) |> 
  ggplot(aes(x = log2(baseMean), y = log2FoldChange)) +
  geom_point(aes(color = detection_call_fct), size = 0.5, alpha = 0.8) +
  scale_color_manual(values = c("Sig." = "firebrick", "N.S." = "grey")) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(vars(term_fct), ncol = 2) +
  labs(
    x = "log2 mean expression level",
    y = "LFC",
    color = NULL
  )

ma_plot
```

```{r}
ggsave("figures/ma_plot.pdf", ma_plot, width = 8, height = 5.5)
```

```{r}
detected <- de_results |> 
  mutate(
    detected = purrr::map(
      result_df, 
      \(x) x |> 
        filter(detection_call == 1) |> 
        pull(gene)
    )
  ) |> 
  select(type, term, term_fct, term_type, detected) |> 
  pivot_wider(
    id_cols = c(term, term_fct, term_type), names_from = type, values_from = detected
  ) 
```

```{r}
library(ComplexHeatmap)
```

```{r}
detected <- detected |> 
  mutate(
    comb_mat = map2(
      full, filter, 
      \(x, y) {
        l <- list(full = x, filter = y)
        make_comb_mat(l)
      }
    ),
    upset_plot = map(
      comb_mat, 
      \(x) UpSet(
        x, comb_order = order(comb_size(x), decreasing = TRUE), 
        top_annotation = upset_top_annotation(x, add_numbers = TRUE),
        right_annotation = upset_right_annotation(x, add_numbers = TRUE)
      )
    )
  )
```

```{r}
detected$upset_plot[[1]]
```

```{r}
detected_inter <- detected |> 
  filter(term_type == "interaction") |> 
  select(c(term, term_fct, filter))

detected_inter_list <- detected_inter$filter
names(detected_inter_list) <- detected_inter$term_fct
```

```{r}
comb_mat_inter <- make_comb_mat(detected_inter_list)
```

```{r}
upset_plot <- UpSet(
  comb_mat_inter, 
  comb_order = order(comb_size(comb_mat_inter), decreasing = TRUE), 
  top_annotation = upset_top_annotation(
    comb_mat_inter, add_numbers = TRUE, annotation_name_gp = gpar(fontsize = 7)
  ),
  right_annotation = upset_right_annotation(
    comb_mat_inter, add_numbers = TRUE, annotation_name_gp = gpar(fontsize = 7)
  ),
  row_names_gp = gpar(fontsize = 9)
)

upset_plot
```

```{r}
pdf(file = "figures/upset_plot.pdf", width = 6.5, height = 3.5)
draw(upset_plot)
dev.off()
```

```{r}
volcano_data <- de_results_df_filter |>
  drop_na(padj) |> 
  group_by(term) |>
  mutate(
    rank = rank(padj, ties.method = "first"),
    min_nonzero_padj = min(padj[padj > 1e-50], na.rm = TRUE),
    padj = if_else(padj < 1e-30, min_nonzero_padj * 1e-1, padj),
    neg_log10_padj = -log10(padj)
  ) |>
  ungroup()
```

```{r}
top_genes_volcano <- volcano_data |>
  filter(rank <= 10)
```

```{r}
volcano_plot <- volcano_data |> 
  ggplot(
    aes(x = log2FoldChange, y = neg_log10_padj)
  ) +
  geom_point(aes(colour = detection_call_fct), alpha = 0.6, size = 0.8) +
  geom_text_repel(
    data = top_genes_volcano,
    aes(label = gene),
    size = 3,
    max.overlaps = Inf,
    box.padding = 0.3,
    show.legend = FALSE
  ) +
  geom_hline(yintercept = 1, linetype = "dashed", linewidth = 0.1) +
  geom_vline(xintercept = 0, linetype = "dashed", linewidth = 0.1) +
  facet_wrap(vars(term_fct), scales = "free") +
  scale_color_manual(
    values = c("Sig." = "firebrick","N.S." = "gray")
  ) +
  labs(
    x = "LFC",
    y = "-log10 adj. p-value",
    color = NULL
  ) 

volcano_plot
```

```{r}
ggsave("figures/volcano_plot.pdf", volcano_plot, height = 8.5, width = 11)
```

```{r}
repeated_top_genes <- top_genes_volcano |>
  dplyr::count(gene, name = "n_contrasts") |>
  filter(n_contrasts > 1) |>
  arrange(desc(n_contrasts))
```

```{r}
readr::write_csv(repeated_top_genes, "results/repeated_top_genes.csv")
```

```{r}
detected_genes <- de_results_df_filter |> 
  drop_na(padj) |> 
  filter(detection_call == 1) |> 
  pull(gene) |> 
  unique()
```

```{r}
clustering <- mats |> 
  filter(type == "filter", method != "cpm") |> 
  select(method, mat) |> 
  mutate(
    transformed = map2(
      method, mat, \(x, y) get_transform(y, method = x, blind = FALSE)
    ),
    transformed = map(
      transformed, \(x) x[detected_genes, ]
    ),
    genes_var = map(transformed, \(x) rowVars(x)),
    genes_keep = map(
      genes_var, \(x) order(x, decreasing = TRUE)[1:500]
    ),
    transformed = map2(transformed, genes_keep, \(x, y) x[y, ]),
    transformed_scaled = map(transformed, \(x) t(scale(t(x))))
  ) |> 
  select(-c(mat, genes_var, genes_keep, transformed))
```

```{r}
hclust_pearson <- function(x, k) {
  d <- as.dist(1 - cor(t(x), method = "pearson"))  
  hc <- hclust(d, method = "ward.D2")
  cutree(hc, k = k)
  list(cluster = cutree(hc, k = k))
}
```

```{r}
gap_plots <- clustering |> 
  mutate(
    gap_plot = map(
      transformed_scaled, 
      \(x) factoextra::fviz_nbclust(
        x, FUNcluster = hclust_pearson, method = "gap_stat", verbose = FALSE
      ) +
        labs(title = NULL, x = "Number of clusters", y = "Gap statistic")
    )
  )
```

```{r}
walk(gap_plots$gap_plot, print)
```

```{r}
ggsave("figures/gap_plot.pdf", gap_plots$gap_plot[[2]], width = 6, height = 4)
```

```{r}
samples_heatmap <- samples |> 
  tibble::column_to_rownames(var = "sample") |> 
  select(strain, media, temperature)
```

```{r}
ha <-  HeatmapAnnotation(
  df = samples_heatmap[, rev(colnames(samples_heatmap))], 
  simple_anno_size = unit(0.4, "cm"), show_annotation_name = TRUE, 
  col = conditions_pal[1:3], 
  annotation_label = c("Strain", "Media", "Temperature"), 
  annotation_name_gp = gpar(fontsize = 7)
)
```

```{r}
col_fun <- circlize::colorRamp2(c(-2, 0, 2), c("#2c7bb6", "#ffffbf", "#d7191c"))
```

```{r}
heatmaps <- clustering |> 
  mutate(
    heatmap = map(
      transformed_scaled,
      \(x) {
        h <- Heatmap(
          x, name = "z-scores", show_row_names = FALSE, 
          clustering_method_rows = "ward.D2",
          clustering_method_columns = "ward.D2", split = 4,
          clustering_distance_rows = "pearson", top_annotation = ha,
          col = col_fun, row_names_gp = gpar(fontsize = 7), 
          column_names_gp = gpar(fontsize = 7),
          row_title_gp = gpar(fontsize = 9), 
          column_title = "Samples", column_title_gp = gpar(fontsize = 9)
        ) 
        draw(h)
      }
    )
  )
```

```{r}
pdf(file = "figures/heatmap_rlog.pdf", width = 6.5, height = 6)
heatmaps$heatmap[[2]]
dev.off()
```

```{r}
cluster_pal <- c("#d00000", "#ffba08", "#3f88c5", "#032b43")
names(cluster_pal) <- as.character(1:4)
```


```{r}
line_plots <- heatmaps |> 
  mutate(
    clust_list = map2(
      transformed_scaled, heatmap, 
      \(x, y) lapply(row_order(y), \(a) row.names(x)[a])
    ),
    clust_df = map(
      clust_list, 
      \(x) list_rbind(
        imap(x, \(y, idy) tibble(gene = y, cluster = idy))
      )
    ),
    gene_clust = map2(
      transformed_scaled, clust_df,
      \(x, y) x |> 
        as.data.frame() |> 
        tibble::rownames_to_column(var = "gene") |> 
        pivot_longer(
          starts_with("S"), names_to = "sample", values_to = "expression"
        ) |> 
        inner_join(samples, by = c("sample" = "sample")) |> 
        inner_join(y, by = "gene") |> 
        mutate(cluster = factor(cluster, levels = as.character(1:4)))
    ),
    lineplot_temperature = map(
      gene_clust, 
      \(x) x |> 
        group_by(cluster, strain, temperature) |> 
        summarise(mean = mean(expression), sd = sd(expression), .groups = "drop") |> 
        ggplot(aes(forcats::fct_rev(temperature), mean, colour = cluster, group = cluster)) +
        geom_point() +
        geom_line() +
        geom_hline(yintercept = 0, linetype = "dashed") +
        labs(x = "Temperature", y = "Average z-score") +
        facet_wrap(vars(strain)) +
        scale_colour_manual(name = "Cluster", values = cluster_pal) 
    ),
    lineplot_media = map(
      gene_clust, 
      \(x) x |> 
        group_by(cluster, strain, media) |> 
        summarise(mean = mean(expression), sd = sd(expression), .groups = "drop") |> 
        ggplot(aes(media, mean, colour = cluster, group = cluster)) +
        geom_point() +
        geom_line() +
        geom_hline(yintercept = 0, linetype = "dashed") +
        labs(x = "Media", y = "Average z-score") +
        facet_wrap(vars(strain)) +
        scale_colour_manual(name = "Cluster", values = cluster_pal) 
    )
  )
```

```{r}
walk(line_plots$lineplot_temperature, print)
```

```{r}
walk(line_plots$lineplot_media, print)
```

```{r}
cluter_profile_plot <- line_plots$lineplot_media[[2]] / 
  line_plots$lineplot_temperature[[2]] +
  plot_layout(guides = "collect", axes = "collect_y")

cluter_profile_plot
```

```{r}
ggsave("figures/cluster_profile_plot.pdf", cluter_profile_plot, width = 8, height = 6)
```

```{r}
de_cluster <- line_plots$clust_df[[2]] |> 
  left_join(de_results_df_filter, by = "gene")

de_cluster
```

```{r}
top_genes <- de_cluster |> 
  group_by(gene) |> 
  summarise(
    max_abs_lfc = max(abs(log2FoldChange), na.rm = TRUE),
    min_padj = min(padj, na.rm = TRUE),
    .groups = "drop"
  ) |> 
  mutate(
    rank_lfc = rank(-max_abs_lfc, ties.method = "min"),
    rank_padj = rank(min_padj, ties.method = "min"),
    avg_rank = (rank_lfc + rank_padj) / 2
  ) |> 
  # arrange(avg_rank) |> 
  arrange(min_padj) |> 
  slice_head(n = 100)
```

```{r}
heatmap_matrix <- de_cluster |> 
  filter(gene %in% top_genes$gene) |> 
  mutate(lfc_masked = ifelse(padj < 0.1, log2FoldChange, NA)) |> 
  select(gene, term, lfc_masked) |> 
  pivot_wider(names_from = term, values_from = lfc_masked) |> 
  tibble::column_to_rownames("gene") |> 
  as.matrix()
```

```{r}
annotation_df <- line_plots$clust_df[[2]] |> 
  filter(gene %in% top_genes$gene) |> 
  mutate(Cluster = factor(cluster), .keep = "unused") |> 
  tibble::column_to_rownames(var = "gene")
```

```{r}
heatmap_lfc <- pheatmap(
  heatmap_matrix,
  name = "LFC",
  cluster_rows = FALSE,
  cluster_cols = FALSE,
  legend_breaks = seq(-6, 6, by = 2),
  annotation_row = annotation_df,
  labels_col = c(
    "FL + YC", "FL + YE", "FL + YCE", "FL + 30"
  ),
  annotation_names_row = FALSE,
  angle_col = "0",
  annotation_colors = list(Cluster = cluster_pal),
  column_names_side = "top",
  fontsize = 7,
  fontsize_row = 6,
  fontsize_col = 7
  # color = colorRampPalette(RColorBrewer::brewer.pal(11, "RdBu"))(100),
  # breaks = seq(-3, 3, length.out = 101),
  # fontsize_row = 6
)

draw(heatmap_lfc)
```

```{r}
pdf(file = "figures/heatmap_lfc.pdf", width = 5, height = 9.5)
draw(heatmap_lfc)
dev.off()
```




----------------------------

```{r}
pca_plots <- pca_results |> 
  mutate(
    pca_plot_12 = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) {
        biplot(
          c, x = "PC1", y = "PC2", showLoadings = TRUE, colby = "strain", 
          shape = "media", hline = 0, vline = 0, legendPosition = "right", 
          ntopLoadings = 10, max.overlaps = 50, lengthLoadingsArrowsFactor = 3,
          xlim = c(-100, 100), ylim = c(-50, 50)
        ) +
          ggtitle(paste0(b, " transformation - ", a))
      }
    ),
    pca_plot_13 = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) {
        biplot(
          c, x = "PC1", y = "PC3", showLoadings = TRUE, colby = "strain",
          shape = "temperature", hline = 0, vline = 0, legendPosition = "right", 
          ntopLoadings = 10, max.overlaps = 50, lengthLoadingsArrowsFactor = 3
        ) +
          ggtitle(paste0(b, " transformation - ", a))
      }
    ),
    pca_plot_23 = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) {
        biplot(
          c, x = "PC2", y = "PC3", showLoadings = TRUE, colby = "media",
          shape = "temperature", hline = 0, vline = 0, legendPosition = "right", 
          ntopLoadings = 10, max.overlaps = 50, lengthLoadingsArrowsFactor = 3
        ) +
          ggtitle(paste0(b, " transformation - ", a))
      }
    )
  )
```

```{r}
for (plt in pca_results$pca_plot_12) print(plt)
```

```{r}
for (plt in pca_results$pca_plot_13) print(plt)
```

```{r}
for (plt in pca_results$pca_plot_23) print(plt)
```

```{r}
pca_results <- pca_results |> 
  mutate(
    loadings_plot = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) {
        plotloadings(
          c, components = getComponents(c, 1:3), rangeRetain = 0.01) +
          ggtitle(paste0(b, " transformation - ", a)
        )
      }
    ),
    loadings = map(
      pca, \(x) getLoadings(x, components = getComponents(x, 1:3))
    )
  )
```

```{r}
for (plt in pca_results$loadings_plot) print(plt)
```

```{r}
pca_boxplot <- function(pca, cond, type, method) {
  pca$rotated |> 
    tibble::rownames_to_column(var = "sample") |> 
    select(c(sample, PC1:PC3)) |> 
    inner_join(samples, by = c("sample" = "sample")) |> 
    pivot_longer(cols = PC1:PC3) |> 
    ggplot(aes({{cond}}, value)) +
    geom_boxplot() +
    facet_wrap(vars(name), ncol = 3) +
    ggtitle(paste0(method, " transformation - ", type))
}
```

```{r}
pca_results <- pca_results |> 
  mutate(
    boxplot_strain = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) pca_boxplot(c, strain, a, b)
    ),
    boxplot_media = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) pca_boxplot(c, media, a, b)
    ),
    boxplot_temperature = pmap(
      list(a = type, b = method, c = pca), 
      \(a, b, c) pca_boxplot(c, temperature, a, b)
    )
  )
```

```{r}
for (plt in pca_results$boxplot_strain) print(plt)
```

```{r}
for (plt in pca_results$boxplot_media) print(plt)
```

```{r}
for (plt in pca_results$boxplot_temperature) print(plt)
```

```{r}
removed_by_filter <- de_results |> 
  mutate(
    removed_genes = map(
      result_df, 
      \(x) x |> filter(is.na(padj)) |> pull(gene) 
    )
  ) |> 
  select(type, term, removed_genes) |> 
  pivot_wider(
    id_cols = term, names_from = type, values_from = removed_genes
  ) 

removed_by_filter
```

```{r}
de_results <- de_results |> 
  mutate(
    top_labels = map(
      result_df,
      \(x) x |> 
        drop_na(padj) |> 
        arrange(padj) |> 
        slice_head(n = 10) |> 
        pull(gene)
    ),
    ma_plot = pmap(
      list(a = type, b = term, c = result, d = top_labels),
      \(a, b, c, d) {
        ggpubr::ggmaplot(
          c, fdr = 0.1, fc = 1, size = 0.5, main = paste0(b, " - ", a),
          top = 0, label.select = d
        )
      }
    ),
    volcano_plot = pmap(
      list(a = type, b = term, c = result_df, d = top_labels),
      \(a, b, c, d) {
        EnhancedVolcano::EnhancedVolcano(
          c, lab = c$gene, x = "log2FoldChange", y = "padj", 
          title = paste0(b, " - ", a), subtitle = NULL, caption = NULL, 
          pCutoff = 0.1, FCcutoff = 0, pointSize = 0.5, selectLab = d,
          drawConnectors = TRUE, arrowheads = FALSE
        )
      } 
    ),
    pvalue_plot = pmap(
      list(a = type, b = term, c = result_df, d = result),
      \(a, b, c, d) {
        c |>
          filter(baseMean > metadata(d)$filterThreshold) |>
          ggplot(aes(pvalue)) +
          geom_histogram(breaks = 0:20/20) +
          ggtitle(paste0(b, " - ", a))
      }
    )
  )
```

```{r}
inter_terms <- c(
  "straindelta.mediaYPD_CFW", "straindelta.mediaYPD_EGTA",
  "straindelta.mediaYPD_CFW_EGTA", "straindelta.temperature30"
)

de_results_inter <- de_results |> 
  filter(type == "filter", term %in% inter_terms)
```

```{r}
for (plt in de_results_inter$ma_plot) print(plt)
```
```{r}
for (plt in de_results_inter$volcano_plot) print(plt)
```


```{r}
for (plt in de_results_inter$pvalue_plot) print(plt)
```



```{r}
for (plt in detected$upset_plot[4:6]) print(plt)
```

```{r}
detected_inter <- detected |> 
  filter(term %in% inter_terms) |> 
  select(c(term, filter))

detected_inter_list <- detected_inter$filter
names(detected_inter_list) <- detected_inter$term
```

```{r}
comb_mat_inter <- make_comb_mat(detected_inter_list)
```

```{r}
UpSet(
  comb_mat_inter, 
  comb_order = order(comb_size(comb_mat_inter), decreasing = TRUE), 
  top_annotation = upset_top_annotation(comb_mat_inter, add_numbers = TRUE),
  right_annotation = upset_right_annotation(comb_mat_inter, add_numbers = TRUE)
)
```

```{r}
hm_metadata <- samples |> 
  tibble::column_to_rownames(var = "sample") |> 
  select(strain, media, temperature)
```

```{r}
counts_mat_top50var <- counts_mat[genes_top50var, ]
```

```{r}
count_hm_col <- circlize::colorRamp2(
  pretty(range(counts_mat_top50var/100), n = 3), 
  c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026')
)
```

```{r}
hm_annotation <-  HeatmapAnnotation(
  df = hm_metadata, simple_anno_size = unit(0.4, "cm"), 
  show_annotation_name = TRUE, col = conditions_pal,
  annotation_label = c("Strain", "Media", "Temperature"), 
  annotation_name_gp = gpar(fontsize = 7)
)
```

```{r}
counts_hm <- Heatmap(
  counts_mat_top50var/100, cluster_rows = TRUE, cluster_columns = TRUE, top_annotation = hm_annotation,
  col = count_hm_col, name = "Raw count\n(x100)", row_names_gp = gpar(fontsize = 7), column_names_gp = gpar(fontsize = 7),
  row_title = "Genes", row_title_gp = gpar(fontsize = 9), column_title = "Samples", column_title_gp = gpar(fontsize = 9)
)

draw(counts_hm)
```

```{r}
pdf(file = "figures/counts_hm.pdf", width = 6.5, height = 4)
draw(counts_hm)
dev.off()
```

-----------------------

